<?xml version="1.0"?>
<?access-control allow="*"?>
<!--
XBL2 UI stuff
Copyright 2007, Sean Hogan (http://www.meekostuff.net/)
All rights reserved
-->
<xbl xmlns="http://www.w3.org/ns/xbl">

<binding id="HTMLElement" element="*">
	<implementation>
<![CDATA[
(function() {

var prototype = {

getClassList: function() {
	return this._classList;
},

xblBindingAttached: function() {
	this._classList = ({
	_binding: this,
	_getTokens: function() {
		var text = this._binding.boundElement.className;
		if (!text) return [];
		var strings = text.split(/\s+/);
		var sorted = strings.sort();
		for (var i=sorted.length-1; i>0; i--) {
			if (sorted[i] == sorted[i-1]) sorted.splice(i);
		}
		return sorted;
	},
	getLength: function() { return this._getTokens().length; },
	item: function(index) { return this._getTokens()[index]; },
	has: function(string) { return (-1 != Array.indexOf(this._getTokens(), string)); },
	add: function(string) {
		var tokens = this._getTokens();
		if (!this.has(string)) {
			var text = this._binding.boundElement.className.replace(/\s*$/, " " + string);
			this._binding.boundElement.className = text;
		}
	},
	remove: function(string) {
		if (this.has(string)) {
			var rex, text = this._binding.boundElement.className;
			rex = RegExp("\\s+"+string+"\\s+", "g");
			text = text.replace(rex, " ");
			rex = RegExp("^\\s*"+string+"\\s+");
			text = text.replace(rex, "");
			rex = RegExp("\\s+"+string+"\\s*$");
			text = text.replace(rex, "");
			if (text == string) text = "";
			this._binding.boundElement.className = text;
		}
	},
	toggle: function(string) {
		if (this.has(string)) this.remove(string);
		else this.add(string);
	}
	});
}

};

if (prototype.__defineGetter__) {
	prototype.__defineGetter__("classList", prototype.getClassList);
}

return prototype;
})()]]>
	</implementation>
</binding>

<binding id="ElementUI" element="*">
	<implementation>
<![CDATA[({

xblBindingAttached: function() {
	this._meta = [];
	this._meta[0] = true; // enabled
	this._meta[1] = false; // default
	this._meta[2] = false; // checked
	this._meta[3] = false; // selected
	this._meta[4] = false; // valid
	this._meta[5] = false; // required
	this._meta[6] = 3; // data
	this._meta[10] = 0; // value
	
	this._dynamic = [];
	this._dynamic[0] = false; // active
	this._dynamic[1] = false; // hover
	this._dynamic[2] = true; // open
	
},

setDynamicState: function(state, value) {
	var evType =
		(0 == state) ? "activestatechange" :
		(1 == state) ? "hoverstatechange" :
		(2 == state) ? "openstatechange" :
		null;
	if (null == evType) throw "Invalid state in setDynamicState()";
	
	var bVal = Boolean(value);
	this._dynamic[state] = bVal;
	try {
		if (document.createEvent) {
			event = document.createEvent("UIEvents");
			event.initUIEvent(evType, false, true, null, bVal);
			var rc = this.boundElement.dispatchEvent(event);
		}
		else {
			event = document.createEventObject();
			event.detail = bVal;
			var rc = this.boundElement.fireEvent(evType, event);
		}
	}
	catch (error) {
		event.type = evType;
		event.detail = bVal;
		this.boundElement._elementXBL.handleEvent(event);
	}
},

getDynamicState: function(state) {
	return this._dynamic[state];
}

})]]></implementation>
</binding>

<binding id="tree">
	<implementation>
<![CDATA[({

getRefElement: function() {
	for (var node=this.boundElement.firstChild; node; node=node.nextSibling) {
		if ("A" == node.tagName || "LABEL" == node.tagName) return node;
	}
	return null;
},

getView: function() {
	var element = this.boundElement;
	var document = element.ownerDocument;
	var ref = this.getRefElement();
	if ("A" == ref.tagName) {
		var href = ref.href;
		var baseURI = document.documentURI;
		var rex = new RegExp("^"+baseURI+"#");
		if (href.match(rex)) {
			var id = href.replace(rex, "");
			return document.getElementById(id);
		}
	}
	else if ("LABEL" == ref.tagName) {
		var id = ref.htmlFor;
		if (id) return document.getElementById(id);
	}
	return null;
},

getList: function() {
	var node = this.boundElement;
	if ("OL" == node.tagName || "UL" == node.tagName || "SELECT" == node.tagName) return node;
	for (var node=node.firstChild; node; node=node.nextSibling) {
		if ("OL" == node.tagName || "UL" == node.tagName || "SELECT" == node.tagName) return node;
	}
	return null;
},

setOpenState: function(state) {
	var element = this.boundElement;
	var list = this.getList();
	if (!list) throw " ";
	if (state) {
		element.setAttribute("class", "open");
	}
	else {
		element.setAttribute("class", "closed");
	}
},

getOpenState: function() {
	var element = this.boundElement;
	var list = this.getList();
	if (!list) throw " ";
	var state = (element.getAttribute("class") == "open");
	return state;
	
},

getItems: function() {
	var list = this.getList();
	var items = [];
	forEach (list.childNodes, function(node) {
		if (Node.ELEMENT_NODE == node.nodeType) items.push(node);
	});
	return items;
},

getSelectedItem: function() {
	var items = this.getItems();
	var n = items.length;
	for (var i=0; i<n; i++) {
		if ("current" == items[i].className) return items[i];
	}
	return null;
},

selectItem: function(item) {
	var list = this.getList();
	if (item.parentNode != list) throw "Element doesn't exist in list";
	var items = this.getItems();
	var n = items.length;
	for (var i=0; i<n; i++) {
		if (items[i] == item) items[i].getClassList().add("current");
		else items[i].getClassList().remove("current");
	}
	this.signalChange();
},

signalChange: function() {
	var element = this.boundElement;
	var document = element.ownerDocument;
	var event;
	try {
		if (document.createEvent) {
			event = document.createEvent("HTMLEvents");
			event.initEvent("change", false, true);
			var rc = this.boundElement.dispatchEvent(event);
		}
		else {
			event = document.createEventObject();
			var rc = this.boundElement.fireEvent("onchange", event);
		}
	}
	catch (error) {
		event.type = "change";
		this.boundElement._elementXBL.handleEvent(event);
	}
	return;
},

xblEnteredDocument: function() {
	var item = this.getSelectedItem();
	if (item) {
		this.signalChange();
	}
	else {
		item = this.getItems()[0];
		this.selectItem(item);
	}
}		

})]]>
	</implementation>
</binding>

<binding id="treeitem">
	<implementation>
<![CDATA[({

getRefElement: function() {
	for (var node=this.boundElement.firstChild; node; node=node.nextSibling) {
		if ("A" == node.tagName || "LABEL" == node.tagName) return node;
	}
	return null;
},

getView: function() {
	var element = this.boundElement;
	var document = element.ownerDocument;
	var ref = this.getRefElement();
	if ("A" == ref.tagName) {
		var href = ref.href;
		var baseURI = document.documentURI;
		var rex = new RegExp("^"+baseURI+"#");
		if (href.match(rex)) {
			var id = href.replace(rex, "");
			return document.getElementById(id);
		}
	}
	else if ("LABEL" == ref.tagName) {
		var id = ref.htmlFor;
		if (id) return document.getElementById(id);
	}
	return null;
},

getList: function() {
	var node = this.boundElement;
	if ("OL" == node.tagName || "UL" == node.tagName || "SELECT" == node.tagName) return node;
	for (var node=node.firstChild; node; node=node.nextSibling) {
		if ("OL" == node.tagName || "UL" == node.tagName || "SELECT" == node.tagName) return node;
	}
	return null;
},

activate: function() {
	var element = this.boundElement;
	for (var ancestor=element.parentNode; ancestor; ancestor=ancestor.parentNode) {
		if (ancestor.selectItem) {
			ancestor.selectItem(element);
			break;
		}
	}
},

setOpenState: function(state) {
	var element = this.boundElement;
	var list = this.getList();
	if (!list) throw "setOpenState";
	if (state) {
		element.getClassList().remove("closed");
		element.getClassList().add("open");
	}
	else {
		element.getClassList().remove("open");
		element.getClassList().add("closed");
	}
},

getOpenState: function() {
	var element = this.boundElement;
	var list = this.getList();
	if (!list) throw "getOpenState";
	return element.getClassList().has("open");
}

})]]>
	</implementation>
</binding>

<binding id="navlist">
	<implementation>
<![CDATA[({

getRefElement: function() {
	for (var node=this.boundElement.firstChild; node; node=node.nextSibling) {
		if ("A" == node.tagName) return node;
	}
	return null;
},

getView: function() {
	var element = this.boundElement;
	var document = element.ownerDocument;
	var anchor = this.getRefElement();
	var href = anchor.href;
	var baseURI = document.documentURI;
	var rex = new RegExp("^"+baseURI+"#");
	if (href.match(rex)) {
		var id = href.replace(rex, "");
		return document.getElementById(id);
	}
	return null;
},

getList: function() {
	var element = this.boundElement;
	if ("OL" == element.tagName || "UL" == element.tagName) return node;
	for (var node=element.firstChild; node; node=node.nextSibling) {
		if ("OL" == node.tagName || "UL" == node.tagName) return node;
	}
	return null;
},

getItems: function() {
	var list = this.getList();
	var items = [];
	forEach (list.childNodes, function(node) {
		if (Node.ELEMENT_NODE == node.nodeType) items.push(node);
	});
	return items;
},

getSelectedIndex: function() {
	var items = this.getItems();
	var n = items.length;
	for (var i=0; i<n; i++) {
		if (items[i].getClassList().has("current")) return i;
	}
	return null;
},

getSelectedItem: function() {
	var items = this.getItems();
	var n = items.length;
	for (var i=0; i<n; i++) {
		if (items[i].getClassList().has("current")) return items[i];
	}
	return null;
},

selectItem: function(item) {
	var list = this.getList();
	if (item.parentNode != list) throw "Element doesn't exist in list";
	var items = this.getItems();
	var n = items.length;
	for (var i=0; i<n; i++) {
		if (items[i] == item) items[i].getClassList().add("current");
		else items[i].getClassList().remove("current");
	}
	this.signalChange();
},

signalChange: function() {
	var element = this.boundElement;
	var document = element.ownerDocument;
	var event;
	try {
		if (document.createEvent) {
			event = document.createEvent("HTMLEvents");
			event.initEvent("change", false, true);
			var rc = element.dispatchEvent(event);
		}
		else {
			event = document.createEventObject();
			var rc = element.fireEvent("onchange", event);
		}
	}
	catch (error) {
		event.type = "change";
		element._elementXBL.handleEvent(event);
	}

	return;
},

xblEnteredDocument: function() {
	var item = this.getSelectedItem();
	if (item) {
		this.signalChange();
	}
	else {
		var item = this.getItems()[0];
		this.selectItem(item);
	}
}		

})]]>
	</implementation>
</binding>

<binding id="navlistitem">
	<implementation>
<![CDATA[({

getRefElement: function() {
	for (var node=this.boundElement.firstChild; node; node=node.nextSibling) {
		if ("A" == node.tagName) return node;
	}
	return null;
},

getView: function() {
	var element = this.boundElement;
	var document = element.ownerDocument;
	var anchor = this.getRefElement();
	var href = anchor.href;
	var baseURI = document.documentURI;
	var rex = new RegExp("^"+baseURI+"#");
	if (href.match(rex)) {
		var id = href.replace(rex, "");
		return document.getElementById(id);
	}
	return null;
}
	
})]]>
	</implementation>
	<handlers>
		<handler event="click" default-action="cancel">
		var element = this.boundElement;
		for (var ancestor=element.parentNode; ancestor; ancestor=ancestor.parentNode) {
			if (ancestor.selectItem) {
				ancestor.selectItem(element);
				break;
			}
		}
		</handler>
	</handlers>
</binding>

<binding id="navlink">
	<handlers>
		<handler event="click" default-action="cancel">
		</handler>
	</handlers>
</binding>

<binding id="scrollBox">
	<implementation>
({
setView: function(item) {
	var element = this.boundElement;
	var document = element.ownerDocument;
	for (var node=item; element!=node; node=node.parentNode) {
		if (document==node) throw "setView failed: item is not descendant of scrollBox";
	}

	element.scrollTop = item.offsetTop - element.offsetTop;
}

})
	</implementation>
</binding>
	
<binding id="scrollBoxWithResize">
	<implementation>
({
setView: function(item) {
	var element = this.boundElement;
	var document = element.ownerDocument;
	for (var node=item; element!=node; node=node.parentNode) {
		if (document==node) throw "setView failed: item is not descendant of scrollBoxWithResize";
	}
	element.style.height = String(item.clientHeight) + "px";
	element.scrollTop = item.offsetTop - element.offsetTop;
},

xblBindingAttached: function() {
	var element = this.boundElement;
	var elementHeight = element.clientHeight;
	element.style.overflow = "hidden";
	element.style.height = "0px";
}
})
	</implementation>
</binding>
	
<binding id="switchBox">
	<implementation>
<![CDATA[({

setView: function(item) {
	var element = this.boundElement;
	if (element != item.parentNode) throw "setView failed: item is not child of switchBox";
	forEach (element.childNodes, function(child) {
		if (Node.ELEMENT_NODE != child.nodeType) return;
		if (item == child) child.style.display = "";
		else child.style.display = "none";
	});
},

_getPanels: function() {
	var elements = [];
	forEach (this.boundElement.childNodes, function(child) {
		if (Node.ELEMENT_NODE == child.nodeType) elements.push(child);
	});
	return elements;
},

setViewByIndex: function(index) {
	var panels = this._getPanels();
	var n = panels.length;
	if (index >= n) throw "setViewByIndex failed: index is not valid for switchBox";
	for (var i=0; i<n; i++) {
		if (index == i) panels[i].style.display = "";
		else panels[i].style.display = "";
	}
	return;
}

})]]>
	</implementation>
</binding>


</xbl>
	
