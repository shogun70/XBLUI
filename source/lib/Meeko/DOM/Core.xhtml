<?xml version="1.0"?>
<?xpl-require href="../Javascript-1.6/Javascript.xhtml"?>
<html>
<head>
<script>
<![CDATA[

if (!this.Meeko) this.Meeko = {};
if (!this.Meeko.DOM) this.Meeko.DOM = {};

Meeko.DOM.Core = (function() {
	
var Node = function() {};
Node.ELEMENT_NODE = 1;
Node.ATTRIBUTE_NODE = 2;
Node.TEXT_NODE = 3;
Node.CDATA_SECTION_NODE = 4;
Node.ENTITY_REFERENCE_NODE = 5;
Node.ENTITY_NODE = 6;
Node.PROCESSING_INSTRUCTION_NODE = 7;
Node.COMMENT_NODE = 8;
Node.DOCUMENT_NODE = 9;
Node.DOCUMENT_TYPE_NODE = 10;
Node.DOCUMENT_FRAGMENT_NODE = 11;
Node.NOTATION_NODE = 12;

var DOMException = function() {};

DOMException.INDEX_SIZE_ERR = 1;
DOMException.DOMSTRING_SIZE_ERR = 2;
DOMException.HIERARCHY_REQUEST_ERR = 3;
DOMException.WRONG_DOCUMENT_ERR = 4;
DOMException.INVALID_CHARACTER_ERR = 5;
DOMException.NO_DATA_ALLOWED_ERR = 6;
DOMException.NO_MODIFICATION_ALLOWED_ERR = 7;
DOMException.NOT_FOUND_ERR = 8;
DOMException.NOT_SUPPORTED_ERR = 9;
DOMException.INUSE_ATTRIBUTE_ERR = 10;
DOMException.INVALID_STATE_ERR = 11;
DOMException.SYNTAX_ERR = 12;
DOMException.INVALID_MODIFICATION_ERR = 13;
DOMException.NAMESPACE_ERR = 14;
DOMException.INVALID_ACCESS_ERR = 15;
DOMException.VALIDATION_ERR = 16;
DOMException.TYPE_MISMATCH_ERR = 17;


var Document = function() {};

Document.prototype.importNode = function(node, bDeep) {
	var document = this;
	var tree;
	switch (node.nodeType) {
		case Node.ELEMENT_NODE:
			tree = document.createElement(node.nodeName);
			var attrs = node.attributes;
			for (var i=0; i<attrs.length; i++) {
				var attr = attrs[i];
				tree.setAttribute(attr.nodeName, attr.nodeValue);
			};
			var children = node.childNodes;
			if (bDeep) for (var i=0; i<children.length; i++) {
				var child = children[i];
				tree.appendChild(document.importNode(child, true));
			};
			break;
		case Node.CDATA_SECTION_NODE:
		case Node.TEXT_NODE:
			tree = document.createTextNode(node.nodeValue);
			break;
	}
	return tree;
}


var DOMTokenList = function(getter, setter) { // TODO parameter checking
	this._getText = getter;
	this._setText = setter;
	this.valueOf = getter;
	this.toString = getter;
	this.length = {
		binding: this,
		valueOf: function() { return this.binding.getTokens().length },
		toString: function() { return String(this.valueOf()); }
	};
};
DOMTokenList.prototype.item = function(index) {
	return this._getTokens()[index];		
}
DOMTokenList.prototype.has = function(token) {
	return (-1 != Array.indexOf(this._getTokens(), token));
}
DOMTokenList.prototype.add = function(token) {
	var tokens = this._getTokens();
	if (!this.has(token)) {
		var text = this._getText().replace(/\s*$/, " " + token);
		this._setText(text);
	}
}
DOMTokenList.prototype.remove = function(token) {
	if (this.has(token)) {
		var rex, text = this._getText();
		rex = RegExp("\\s+"+token+"\\s+", "g");
		text = text.replace(rex, " ");
		rex = RegExp("^\\s*"+token+"\\s+");
		text = text.replace(rex, "");
		rex = RegExp("\\s+"+token+"\\s*$");
		text = text.replace(rex, "");
		if (text == token) text = "";
		this._setText(text);
	}		
}
DOMTokenList.prototype.toggle = function(token) {
	if (this.has(token)) this.remove(token);
	else this.add(token);		
}
DOMTokenList.prototype._getTokens = function() {
	var text = this._getText;
	if (!text) return [];
	var strings = text.split(/\s+/);
	var sorted = strings.sort();
	for (var i=sorted.length-1; i>0; i--) {
		if (sorted[i] == sorted[i-1]) sorted.splice(i);
	}
	return sorted;		
}

return {
	Node: Node,
	DOMException: DOMException,
	DOMTokenList: DOMTokenList,
	Document: Document
};

})();

Meeko.xpl.Namespace.enhance(window, Meeko.DOM.Core);

]]>
</script>
</head>
</html>
