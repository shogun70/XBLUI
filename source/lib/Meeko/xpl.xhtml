<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<!-- FIXME This file is no longer used and should be deleted -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Meeko.xpl</title>
	<script type="text/javascript">
<![CDATA[
if (!this.Meeko) this.Meeko = {};
if (!Meeko.xpl) Meeko.xpl = (function() {

var Namespace = function() {};
Namespace.enhance = function(src, dest) {
	for (var className in src) {
		var srcClass = src[className];
		var destClass = dest[className];
		if (destClass) {
			for (var propName in srcClass) {
				if ("prototype" == propName) continue;
				if (destClass[propName]) continue;
				else destClass[propName] = srcClass[propName];
			}
			if (srcClass.prototype && null == destClass.prototype) destClass.prototype = {}; // NOTE fixes DOMException on Opera and Safari2
			for (var propName in srcClass.prototype) {
				if (destClass.prototype[propName]) continue;
				else destClass.prototype[propName] = srcClass.prototype[propName];
			}
		}
		else dest[className] = srcClass;
	}
}

var Logger = function(ref) {
	this.ref = ref;
}

Logger.DEBUG = 0;
Logger.INFO = 1;
Logger.WARN = 2;
Logger.ERROR = 3;

Logger.prototype.log = function() { this._log({ message: arguments }); }
Logger.prototype.debug = function() { this._log({ level: Logger.DEBUG, message: arguments }); }
Logger.prototype.info = function() { this._log({ level: Logger.INFO, message: arguments }); }
Logger.prototype.warn = function() { this._log({ level: Logger.WARN, message: arguments }); }
Logger.prototype.error = function() { this._log({ level: Logger.ERROR, message: arguments }); }

Logger.prototype._log = function(data) {
	data.ref = this.ref;
	if (this._trace) this._trace.log(data);
}

var XPLTrace = function() {}

var XPLContext = function(ref) {
	this.params = {};
	this.logger = new Logger(ref);	
}

var XPLSystem = function() {
	this.prefetch = {};
	this.contexts = {};
	this.trace = new XPLTrace();	
}

XPLSystem.prototype.createContext = function(ref) {
	if (null == ref) { ref = 0; for (var text in this.contexts) ref++; } // NOTE default value for ref is the current number of contexts;
	var xplContext = new XPLContext(ref);
	this.contexts[ref] = xplContext;
	xplContext.logger._trace = this.trace;
	return xplContext;
}

return {
	Namespace: Namespace,
	XPLContext: XPLContext,
	XPLSystem: XPLSystem
}

})();

Meeko.stuff = {};
if (parent && parent.Meeko && parent.Meeko.stuff && parent.Meeko.stuff.trace)
	Meeko.stuff.trace = parent.Meeko.stuff.trace;
else {
	Meeko.stuff.trace = {
		_stack: [],
		log: function(data) { this._stack.push(data); }
	}
}
Meeko.stuff.xplSystem = new Meeko.xpl.XPLSystem();
Meeko.stuff.xplSystem.trace = Meeko.stuff.trace;
]]>
	</script>
</head>
<body>
</body>
</html>
